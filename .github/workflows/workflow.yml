name: Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: 18.15.0
      - run: npm ci
      - run: npm run lint

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: 18.15.0
      - run: npm ci
      - run: npm run test

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: 18.15.0
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: latest
          path: dist

  release:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    name: Release
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      version: ${{ steps.version.outputs.latest }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: 18.15.0
      - uses: actions/download-artifact@v3
        with:
          name: latest
          path: dist
      - run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      - id: version
        run: echo "latest=$(npx release-it --release-version)" >> $GITHUB_OUTPUT
      - run: |
          asset="sab-cdn.tgz"
          mv $(npm pack --silent) ${asset}
          npx release-it --ci \
                         --no-npm.publish \
                         --github.release \
                         --github.assets=${asset} \
                         --github.autoGenerate \
                         --git.commitMessage='chore: release v${version}' \
                         --git.pushArgs=--follow-tags
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - run: echo "Released ${{ steps.version.outputs.latest }} :rocket:" >> $GITHUB_STEP_SUMMARY

  publish:
    name: Publish
    needs: release
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: latest
          path: dist
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Build and push ${TAG}
        run: |
          docker compose build
          docker compose push
        env:
          TAG: ${{ needs.release.outputs.version }}
      - name: Build and push ${TAG}
        run: |
          docker compose build
          docker compose push
        env:
          TAG: latest
      - run: echo "Published images ${{ needs.release.outputs.version }} and latest :ship:" >> $GITHUB_STEP_SUMMARY
